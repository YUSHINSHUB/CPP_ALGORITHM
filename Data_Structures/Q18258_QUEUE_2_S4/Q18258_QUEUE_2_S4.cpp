// Q18258_QUEUE_2_S4.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include <deque>

using namespace std;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	int n;
	cin >> n;// 첫 번째 입력으로 들어오는 숫자를 읽어옵니다. 이 숫자는 총 명령어의 개수입니다.
	deque<int> q; // 덱(Deque)를 생성합니다. 이 덱은 큐(queue)로 사용됩니다.

	string com;
	int num;

	for (int i = 0; i < n; i++) { // n번 동안 반복합니다.
		cin >> com;
		// 사용자로부터 받은 명령어에 따라 작업을 수행합니다.
		if (com == "push") { // "push" 명령어가 입력된 경우
			cin >> num;
			q.push_back(num); // 큐에 숫자를 추가합니다.
		}
		else if (com == "pop") { // "pop" 명령어가 입력된 경우
			if (q.empty()) // 큐가 비어있는지 확인합니다. 비어있다면
				cout << "-1\n"; // "-1"을 출력합니다.
			else { // 비어있지 않다면
				cout << q.front() << "\n";
				q.pop_front(); // 큐의 첫 번째 원소를 가져와 출력하고, 큐에서 제거합니다.
			}
		}
		else if (com == "size") // "size" 명령어가 입력된 경우
			cout << q.size() << "\n"; // 큐의 크기를 출력합니다.
		else if (com == "empty") { // "empty" 명령어가 입력된 경우
			if (q.empty()) // 큐가 비어있는지 확인합니다. 비어있다면
				cout << "1\n"; // "1"을 출력합니다.
			else // 비어있지 않다면
				cout << "0\n"; // "0"을 출력합니다.
		}
		else if (com == "front") { // "front" 명령어가 입력된 경우
			if (q.empty()) // 큐가 비어있는지 확인합니다. 비어있다면
				cout << "-1\n"; // "-1"을 출력합니다.
			else // 비어있지 않다면
				cout << q.front() << "\n"; // 큐의 첫 번째 원소를 출력합니다.
		}
		else if (com == "back") { // "back" 명령어가 입력된 경우
			if (q.empty()) // 큐가 비어있는지 확인합니다. 비어있다면
				cout << "-1\n"; // "-1"을 출력합니다.
			else // 비어있지 않다면
				cout << q.back() << "\n"; // 큐의 마지막 원소를 출력합니다.
		}
	}
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
