// 10699_TodayDate.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#define _CRT_SECURE_NO_WARNINGS // 혹은 localtime_s를 사용
#include<iostream>
#include <ctime>

using namespace std;

int main() {
    time_t timer = time(NULL);
    //time() 함수는 시스템시간을 UNIX 시간 단위로 리턴한다.
    struct tm *t = localtime(&timer);
    //구조체는 어떤 객체를 한가지 변수로 표현하기에는 부족할 떄 사용한다. 참고: https://min-zero.tistory.com/21
    //tm은 이미 만들어져있는 구조체이며 구조체 포인터를 통해 사용할 수 있다. time()함수는 32비트나 64비트 정수를 리턴해주기 떄문에 그대로 사용하기에는
    //문제가 있다. 그러므로 localtime() 함수를 사용하여 구조체 tm으로 포매팅 해준다.

    int yy = (*t).tm_year + 1900;
    int mm = t->tm_mon + 1;
    // 구조체의 멤버에 접근할 떄는 멤버참조연산자 (.)을 사용한다. 이떄 t는 포인터이기 때문에 *을 붙이는것이 맞다. 또한 .이 *보다 우선순위가 높기 떄문에
    //()을 사용해 주어야 한다.
    // .을 사용하는 대신 간접멤버참조연산자 (->)을 사용하는 방법도 있다.
    //tm_year은 1900을, tm_mon은 1을 더해 주어야 알맞은 날짜가 나온다.
    int dd = t->tm_mday;

    cout << yy << "-";
    
    cout.width(2);
    cout.fill('0');
    //cout.width()를 사용하여 cout로 출력할 자릿수를 두자리로 고정해주고 cout.fill()을 사용하여 빈자리를 0으로 채우게 하였다.
    cout << mm << "-";

    cout.width(2);
    cout.fill('0');
    cout << dd;

}

//참고자료: https://coding-factory.tistory.com/668

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
