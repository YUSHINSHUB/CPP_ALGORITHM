// 이진 탐색을 사용하여 최적의 케이블 길이를 찾습니다. 
//케이블의 길이가 중간값일 때 필요한 케이블의 수가 부족하다면 길이를 줄이고, 그렇지 않다면 길이를 늘립니다. 
//이 과정을 반복하여 최적의 케이블 길이를 찾아 출력합니다.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>

using namespace std;
int main() {

	int k, n; // k는 케이블의 개수, n은 필요한 케이블의 개수
	long long cnt, mid; // cnt는 각 반복에서 얻을 수 있는 케이블의 수, mid는 중간값
	long long low = 0, hig = 0; // 이진 탐색을 위한 low, hig 초기화
	cin >> k >> n; // 사용자로부터 k, n의 값을 입력받음

	vector<int> lans(k); // 케이블 길이를 저장할 벡터 생성

	for (int i = 0; i < k; i++) { // 케이블의 개수만큼 반복
		cin >> lans[i]; // 각 케이블의 길이를 배열에 저장
		if (hig < lans[i]) hig = lans[i]; // 가장 긴 케이블 길이를 hig에 저장
	}
	hig++; // 최대 케이블 길이보다 하나 큰 값으로 초기화

	while (low < hig) { // 이진 탐색 시작
		cnt = 0; // 각 반복에서 얻을 수 있는 케이블의 수를 저장하는 변수 초기화
		mid = (low + hig) / 2; // 중간값을 구함
		for (int i = 0; i < k; i++) {
			cnt += lans[i] / mid; // 각 케이블에서 얻을 수 있는 케이블의 수를 더함
		}

		if (cnt < n) { // 필요한 케이블의 수보다 적다면, 케이블의 길이를 줄임
			hig = mid;
		}
		else { // 필요한 케이블의 수보다 많다면, 케이블의 길이를 늘림
			low = mid + 1;
		}
	}

	cout << low - 1; // 최적의 케이블 길이를 출력. low는 hig보다 1만큼 크므로 1을 빼준다.

}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
