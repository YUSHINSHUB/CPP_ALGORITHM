// Q4134_Next_Prime_S4.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include <vector>
#include <math.h>
using namespace std;

int main()
{
	int t;
	cin >> t;

	// 소수가 아닌 수는 소수의 배수이다. 또한 n의 소수여부를 확인하기 위해 하나하나 나누어 보는 방식을 행할 때에는
	// n-1까지 모두 나눠볼 필요 없이 2부터 소숫점을 버린 n의 제곱근 까지만 나누어 보아도 된다.
	// 최댓값인 40억의 제곱근이 63245.553...임을 이용해서 배열에 63246 이하의 모든 소수를 저장해서 이용한다.
	vector<int> prime;
	int pri[63247];
	fill(pri, pri + 63247, 0);
	pri[1] = 1;
	prime.push_back(2);
	for (int i = 4; i < 63247; i += 2) {
		pri[i] = 1;
	}

	for (int i = 3; i < 63247; i += 2) {
		if (pri[i] == 0) {
			prime.push_back(i);
			for (int j = i * 2; j < 63247; j += i)
				pri[i] = 1;
		}
	}

	for (int i = 0; i < t; i++) {
		long long n;
		cin >> n;
		if (n < 2)
			n = 2;
		for (int j = 0; j < prime.size(); j++) {
			if (prime[j] > sqrt(n))
				break;
			if (n % prime[j] == 0) {
				j = -1;
				n++;
			}
		}
		cout << n << "\n";
	}
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
